version: '2.4'

services:

  centralconsumer:
    image:   ${REPO}/${PROJECT}.centralconsumer:${TAG}
    user:    ${D_UID}:${D_GID}
    restart: always
    command: ['@SeanMorris\Eventi\Consumer::emit', 'test', 'cli-test-group']
    env_file:
      - ${MAIN_DLT}
      - ${MAIN_ENV}
      - ${TRGT_DLT}
      - ${TRGT_ENV}
    build:
      context: ../../
      dockerfile: ${ROOTRELDIR}infra/docker/centralconsumer.dockerfile
      target:  centralconsumer-${TARGET}
      network: bridge
      args:
        UID: ${D_UID}
        GID: ${D_GID}
        CORERELDIR: ${CORERELDIR}
        ROOTRELDIR: ${ROOTRELDIR}

  kayveeproducer:
    image:   ${REPO}/${PROJECT}.centralconsumer:${TAG}
    user:    ${D_UID}:${D_GID}
    restart: always
    command: ['@SeanMorris\Eventi\KayVeeProducer::emit', '1', '333']
    env_file:
      - ${MAIN_DLT}
      - ${MAIN_ENV}
      - ${TRGT_DLT}
      - ${TRGT_ENV}

  server:
    build:
      context:    ../../
      dockerfile: ${ROOTRELDIR}infra/docker/server.___gen.dockerfile
      target:     eventi-server-${TARGET}
    extends:
      file: ../../${CORERELDIR}infra/compose/base.yml
      service: server

  idilic:
    image:  ${REPO}/${PROJECT}.idilic:${TAG}
    build:
      context:    ../../
      dockerfile: ${ROOTRELDIR}infra/docker/idilic.___gen.dockerfile
      target:     eventi-idilic-${TARGET}
    extends:
      file: ../../${CORERELDIR}infra/compose/base.yml
      service: idilic

  database:
    extends:
      file: ../../vendor/seanmorris/ids/infra/compose/base.yml
      service: database
    environment:
      MYSQL_RANDOM_ROOT_PASSWORD: 'yes'

  kafka:
    restart: always
    volumes: ['firehose:/bitnami']
    image: bitnami/kafka:2
    environment:
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      ALLOW_PLAINTEXT_LISTENER: 'yes'

  zookeeper:
    restart: always
    volumes: ['zoo:/bitnami']
    image: bitnami/zookeeper:3
    environment:
      ALLOW_ANONYMOUS_LOGIN: 'yes'

  schema-registry:
    image: "confluentinc/cp-schema-registry:latest"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper:2181

  ksql-server:
    image: "confluentinc/ksqldb-server:latest"
    ports:
      - '8088:8088'
    environment:
      KSQL_KSQL_STREAMS_COMMIT_INTERVAL_MS: 250
      KSQL_BOOTSTRAP_SERVERS: kafka:9092
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_KSQL_SCHEMA_REGISTRY_URL: http://schema-registry:8081

  brunch:
    build:
      context: ../../
      dockerfile: ${ROOTRELDIR}infra/docker/brunch.dockerfile
      target: ${TARGET}
      args:
        TARGET: ${TARGET}
    image: ${REPO}/${PROJECT}.brunch:${TAG}
    restart: always
    ports:
      - "9485:9485"
    volumes:
      - ../../:/app
    environment:
      TAG: ${TAG}
      TARGET: ${TARGET}
    env_file:
      - ${MAIN_DLT}
      - ${MAIN_ENV}
      - ${TRGT_DLT}
      - ${TRGT_ENV}

volumes:
  zoo:
    driver: local
  firehose:
    driver: local
  schema:
    driver: local
